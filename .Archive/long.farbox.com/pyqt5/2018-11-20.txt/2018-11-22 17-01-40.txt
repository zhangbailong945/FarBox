---
date: 2018-11-22 12:30
status: public
title: 2018-11-20-3信号与槽5-事件处理机制
---

## 定义
    PyQt为事件处理提供了两种机制：高级的信号与槽机制，以及低级的事件处理机制。信号与槽只能解决窗口控件的某些特定行为，如果要对窗口控件做更深层级的研究，如自定义窗口等，则需要使用低级的事件处理机制。
    
## 区别
    信号与槽可以说是对事件机制的高级封装，如果说事件是用来创建窗口控件的，那么信号与槽就是用来对这个窗口控件使用的。如按钮，当我们使用这个按钮时，只关心clicked信号，至于这个按钮如果接受并处理鼠标点击事件，然后再发射这个信号，则不用关心。但是如果重载一个按钮，这时就需要关心这个问题。比如可以改变它的行为，在鼠标按键按下时触发clicked信号，而不是在释放时。

## 常见事件类型
事件 | 类型
-------|-----
键盘事件 | 按键按下和松开
鼠标事件 | 鼠标指针移动、鼠标按键按下和松开
拖放事件 | 用鼠标进行拖放
滚轮事件 | 鼠标滚轮
绘屏事件 | 重绘屏幕的某些部分
定时事件 | 定时器到时
焦点事件 | 键盘焦点移动
进入和离开事件 | 鼠标指针移入QWidget内，或者移出
移动事件 | QWidget的位置改变
大小改变事件| QWidget的大小改变
显示和隐藏事件 | QWidget的大小改变
窗口事件 |窗口是否为当前窗口
Socket事件 | 
剪切板事件 |
字体改变事件 |
布局改变事件 |

## 使用时间处理的方法
    PyQt5提供了5中时间处理和过滤方法（由弱到强），其中只有前两种方法使用最频繁。
    1.重新实现时间函数,mousePressEvent(),keyPressEvent(),paintEvent()等。
    2.重新实现QObject.event()，一把用在PyQt没有提供该事件的处理函数的情况下，即增加新事件时。
    3.安装时间过滤器，如果对QObject调用installEventFilter，则相当于为这个QObject安装了一个事件过滤器，对于QObject的全部事件来说，他们都会先床底到事件过滤函数eventFilter中，在这个函数中我们可以抛弃或者修改事件，会降低程序性能。
    4.在QApplication中安装事件过滤器，将捕获所有QObject的所有事件，而且第一次获得该事件。也就是说，在将事件发送给其他任何一个事件过滤器之前，都会先发送给QApplication的事件过滤器。
    5.重新实现QApplication的notify()方法，PyQt使用notify()方法来分发时间。要想在任何事件处理器之前捕获时间，唯一的方法就是重新实现QApplicatin的notify()。在实践中，在调试时才会使用这种方法。


## 代码
```python
from PyQt5.QtWidgets import *
from PyQt5.QtCore import pyqtSignal,QThread,QDateTime,QEvent,QTimer,Qt,QPoint
from PyQt5.QtGui import QPainter
import sys,time
from functools import partial
from PyQt5 import QtCore

'''
事件处理
1.重新实现事件函数
2.重载event函数
'''

class WinForm(QWidget):

    #通过类成员定义信号


    def __init__(self,parent=None):
        super(WinForm,self).__init__(parent)
        self.setWindowTitle("重新实现事件函数")
        self.resize(400,300)
        self.justDoubleClicked=False
        self.key=""
        self.text=""
        self.message=""
        self.move(100,100)
        #避免受到窗口大小重绘事件的影响，可以把参数0改成3000(秒)，然后在运行
        QTimer.singleShot(3000,self.giveHelp)
    
    def giveHelp(self):
        #创建线程
        self.text="请点击这里出发追踪鼠标功能"
        #重绘事件，触发paintEvent函数
        self.update()
    
    def closeEvent(self,event):
        print("Closed")
    
    def contextMenuEvent(self,event):
        menu=QMenu(self)
        oneAction=menu.addAction("&One")
        towAction=menu.addAction("&Two")
        oneAction.triggered.connect(self.one)
        towAction.triggered.connect(self.two)
        if not self.message:
            menu.addSeparator()
            threeAction=menu.addAction("&Three")
            threeAction.triggered.connect(self.three)
        menu.exec_(event.globalPos())
    
    ##上下文菜单槽
    def one(self):
        self.message="Menu option one"
        self.update()
    
    def two(self):
        self.message="Menu option two"
        self.update()

    def three(self):
        self.message="Menu option three"
        self.update()
    
    #重新实现绘制事件
    def paintEvent(self,event):
        text=self.text
        i=text.find("\n\n")
        if i>=0:
            text=text[0:i]
        #如果触发了键盘上按键，则在文本上显示这个按键
        if self.key:
            text+="\n\n你刚刚按了{0} 键.".format(self.key)
        painter=QPainter(self)
        painter.setRenderHint(QPainter.TextAntialiasing)
        painter.drawText(self.rect(),Qt.AlignCenter,text)
        if self.message:
            painter.drawText(self.rect(),Qt.AlignBottom|Qt.AlignCenter,self.message)
            QTimer.singleShot(5000,self.clearMessage)
            QTimer.singleShot(5000,self.update)
    
    def clearMessage(self):
        self.message=""
    
    #重现实现窗口大小事件
    def resizeEvent(self,event):
        self.text="调整窗口大小:QSize({0},{1})".format(event.size().width(),event.size().height())
        self.update()
    
    #重新实现鼠标释放事件
    def mouseReleaseEvent(self,event):
        if self.justDoubleClicked:
            self.justDoubleClicked=False
        else:
            #单击鼠标
            self.setMouseTracking(not self.hasMouseTracking())
            if self.hasMouseTracking():
                self.text="开启鼠标跟踪功能.\n"+\
                "请移动一下鼠标!\n"+\
                "单击鼠标可以关闭这个功能"
            else:
                self.text="关闭鼠标跟踪功能\n"+\
                "单击鼠标可以开启这个功能"
            self.update()
    
    def mouseMoveEvent(self,event):
        if not self.justDoubleClicked:
            #将窗口坐标转换为屏幕坐标
            globalPos=self.mapToGlobal(event.pos())
            self.text="""
            鼠标位置：
            窗口坐标：QPint({0},{1})
            屏幕坐标：QPint({2},{3})
            """.format(event.pos().x(),event.pos().y(),globalPos.x(),globalPos.y())
            self.update()
    
    def mouseDoubleClickEvent(self,event):
        self.justDoubleClicked=True
        self.text="你双击了鼠标"
        self.update()
    
    def keyPressEvent(self,event):
        self.key=""
        if event.key()==Qt.Key_Home:
            self.key="home key press!"
        elif event.key()==Qt.Key_End:
            self.key="End key press!"
        elif event.key()==Qt.Key_PageUp:
            if event.modifiers() & Qt.ControlModifier:
                self.key="Ctrl + PageDown press!"
            else:
                self.key="PageDown key press!"
        elif Qt.Key_A<=event.key()<=Qt.Key_Z:
            if event.modifiers() & Qt.ShiftModifier:
                self.key="Shift + "
            self.key+=event.text()
        if self.key:
            self.key=self.key
            self.update()
        else:
            QWidget.keyPressEvent(self,event)
    
    #重载event函数
    def event(self,event):
        if (event.type()==QEvent.KeyPress and event.key()==Qt.Key_Tab):
            self.key="在event()中捕获Tab key!"
            self.update()
            return True
        return QWidget.event(self,event)


if __name__=='__main__':
    app=QApplication(sys.argv)
    #4.Application安装事件过滤器
    demo=WinForm()
    app.installEventFiler(demo)
    demo.show()
    sys.exit(app.exec_())
```

## 事件过滤器
    对要过滤的控件设置installEventFilter，这些控件的所有事件都会被eventFilter函数接受并处理。
    QApplication事件过滤器，只需要
```python
from PyQt5.QtWidgets import *
from PyQt5.QtCore import pyqtSignal,QThread,QDateTime,QEvent,QTimer,Qt,QPoint
from PyQt5.QtGui import QPainter,QImage,QMouseEvent,QTransform,QPixmap
import sys,time
from functools import partial
from PyQt5 import QtCore

'''
事件处理
3.event过滤器
'''

class WinForm(QWidget):

    #通过类成员定义信号


    def __init__(self,parent=None):
        super(WinForm,self).__init__(parent)
        self.setWindowTitle("event过滤器")
        self.width=600
        self.height=300

        self.label1=QLabel("请点击")
        self.label2=QLabel("请点击")
        self.label3=QLabel("请点击")
        self.labeState=QLabel("test")

        self.image1=QImage("D:\\PyQt5Projects\\pyqt5test\images\\test.ico")
        self.image2=QImage("D:\PyQt5Projects\pyqt5test\images\test.ico")
        self.image3=QImage("D:\PyQt5Projects\pyqt5test\images\test.ico")

        self.resize(self.width,self.height)

        #self.label1.installEventFilter(self)
        #self.label2.installEventFilter(self)
        #self.label3.installEventFilter(self)

        mainLayout=QGridLayout(self)
        mainLayout.addWidget(self.label1,500,0)
        mainLayout.addWidget(self.label2,500,1)
        mainLayout.addWidget(self.label3,500,2)
        mainLayout.addWidget(self.labeState,600,1)
        self.setLayout(mainLayout)
    
    def eventFilter(self,watched,event):
        #只对label1的点击事件进行过滤,重写其行为，其他事件会被忽略
        if watched==self.label1:
            if event.type()==QEvent.MouseButtonPress:
                mouseEvent=QMouseEvent(event)
                if mouseEvent.buttons()==Qt.LeftButton:
                    self.labeState.setText("按下鼠标左键")
                elif mouseEvent.buttons()==Qt.MidButton:
                    self.labeState.setText("按下鼠标中间")
                elif mouseEvent.buttons()==Qt.RightButton:
                    self.labeState.setText("按下鼠标右键")
                #转换图片大小
                transform=QTransform()
                transform.scale(0.5,0.5)
                tmp=self.image1.transformed(transform)
                self.label1.setPixmap(QPixmap(tmp))
            #鼠标释放事件
            if event.type()==QEvent.MouseButtonRelease:
                self.labeState.setText("释放鼠标按键")
                self.label1.setPixmap(QPixmap.fromImage(self.image1))
        #其他事件情况，返回默认事件处理方法
        return QWidget.eventFilter(self,watched,event)
    
 


if __name__=='__main__':
    app=QApplication(sys.argv)
    demo=WinForm()
    app.installEventFilter(demo)
    demo.show()
    sys.exit(app.exec_())
```
