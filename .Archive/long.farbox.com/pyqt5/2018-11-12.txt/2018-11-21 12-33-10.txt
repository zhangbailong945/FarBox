---
date: 2018-11-12 22:55
status: public
title: 2018-11-12PyQt5信号与槽1-基础
---

## 定义
    信号（Signal）和槽（Slot）是Qt中的核心机制，也是PyQt编程中对象之间进行通信的机制。在Qt中，每个QOjbect对象和PyQt中所有继承自QWidget的控件都支持信号与槽机制。当信号发射时，连接槽函数将会自动执行。
    在PyQt5中信号与槽通过object.signal.connect()方法连接。
    在GUI编程中，当改变一个控件的状态时（如单击按钮），通常需要通知另一个孔家，也就是实现了对象之间的通信。在早起的GUI编程中使用的是回调机制，在QT中则使用一种新的机制----信号与槽。在编写一个类是，要先定义该类的型号与槽，在类中信号与槽进行连接，实现对象之间的数据传输。

## 特点
    1.一个信号可以连接多个槽
    2.一个信号可以连接两一个信号
    3.信号参数可以是任意python类型
    4.一个槽可以监听多个信号
    5.信号与槽的连接方式可以是同步连接，也可以是异步连接。
    6.信号与槽的连接可能会跨线程。
    7.信号可能会断开
    

## 定义信号
    PyQt的内置信号是自动定义的，使用PyQt5.QtCore.pyqtSignal()函数可以为QObject创建一个信号，使用pyqtSignal()函数可以把信号定义为类的属性。
    信号必须在类创建时定义，不能在类创建后作为类的属性动态添加进来.
    信号可以窗体多个参数，并指定参数的类型。
    代码：
```python
from PyQt5.QtCore import pyqtSignal
selfClicked=pyqtSignal() #定义信号
```

## 操作信号
    1.连接信号，使用connect()函数可以把信号绑定到槽函数上。
    2.解除信号，使用disconnect()函数可以解除信号与槽的绑定。

## 内置信号与槽
```python
from PyQt5.QtCore import QTimer,Qt,QDateTime,pyqtSignal
from PyQt5.QtWidgets import QApplication,QWidget,QGridLayout,\
QListWidget,QLabel,QMessageBox,QPushButton
import sys

'''
内置信号与槽函数
'''

class SignalDemo1(QWidget):

    def __init__(self,parent=None):
        super(SignalDemo1,self).__init__(parent)
        self.initUI()
    
    def initUI(self):
        btnTest=QPushButton("测试",self)
        btnTest.clicked.connect(self.showMsg)
    
    def showMsg(self):
        QMessageBox.information(self,"提示","弹出测试信息")


if __name__=='__main__':
    app=QApplication(sys.argv)
    demo=SignalDemo1()
    demo.show()
    sys.exit(app.exec_())
```

## 自定义信号与槽
```python
from PyQt5.QtCore import QTimer,Qt,QDateTime,pyqtSignal,QObject
from PyQt5.QtWidgets import QApplication,QWidget,QGridLayout,\
QListWidget,QLabel,QMessageBox,QPushButton
import sys

#自定义信号和槽

#信号对象
class QTypeSignal(QObject):

    #定义信号
    sendMsg=pyqtSignal(object)

    def __init__(self):
        super(QTypeSignal,self).__init__()
    
    def run(self):
        self.sendMsg.emit("Hello PyQt5!")

#槽对象
class QTypeSlot(QObject):

    def __init__(self):
        super(QTypeSlot,self).__init__()
    
    def get(self,msg):
        print('QSlot get msg: '+msg)




if __name__=='__main__':
    send=QTypeSignal()
    slot=QTypeSlot()

    send.sendMsg.connect(slot.get)
    send.run()

    send.sendMsg.disconnect(slot.get)
    send.run()
```

## 内置信号与槽函数

## 内置信号与自定义槽函数

## 自定义信号和内置槽函数

## 自定义信号与槽函数

##

## 代码