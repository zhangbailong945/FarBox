---
date: 2018-11-28 12:20
status: public
title: 2018-11-28-1图形与特效4-设置窗口背景
---

## 窗口背景
    窗口背景主要包括：背景色和背景图片，设置窗口背景的三种方法。
    1.使用QSS设置窗口背景
    2.使用QPalette设置窗口背景
    3.实现paintEvent，使用Painter绘制背景

## 使用QSS设置窗口背景
     1.QSS中可以使用background和background-color的方式设置背景色。设置窗口背景色后，子控件默认会继承父窗口的背景色。如果想要为控件设置背景图片或图标，则使用setPixmap或者setIcon。
```python

```

## 使用QPalette设置窗口背景
    1.使用QPalette(调色板)设置窗口的背景颜色
```python
        palette=QPalette()
        palette.setColor(QPalette.Background,Qt.red)
        self.setPalette(palette)
``` 
    2.使用QPalette设置窗口的背景图片
    当使用QPalette设置背景图片时，需要考虑背景图片的尺寸大小，当背景图片的宽度和高度大于窗口的宽度和高度时，背景图片将会平铺整个背景；当背景图片的宽度和高度小于窗口的宽度和高度时，则会加载多个背景图片。
```python
        palette=QPalette()
        palette.setBrush(QPalette.Background,QBrush(QPixmap('d:/PyQt5Projects/pyqt5test/images/python.jpg')))
        self.setPalette(palette)
```

## 使用paintEvent设置窗口背景
    1.设置背景色
```python
    #使用paintEvent設置背景色
    def paintEvent(self,envet):
        painter=QPainter(self)
        painter.setBrush(Qt.black)
        #绘制矩形
        painter.drawRect(self.rect())
```
    2.设置背景图片
```python
    def paintEvent(self,envet):
        painter1=QPainter(self)
        pixmap=QPixmap('d:/PyQt5Projects/pyqt5test/images/python.jpg')
        painter1.drawPixmap(self.rect(),pixmap)
```

## 不规则窗口的显示
    1.QWidget类中的绘图函数
函数 | 描述
------|------
setMask(self,QBitmap) /setMask(self,QRegion)| setMask()的作用是为调用它的控件增加一个遮罩层，遮住所选区域以外的部分，使之看起来是透明的。
paintEvent(self,QPaintEvent) | 通过重载paintEvent()函数绘制窗口背景
    2.使用一张遮罩层png图片来控制窗口的大小，然后再利用paintEvent()函数重绘窗口的背景图。
```python
    def initUI(self):
        self.setObjectName('myWindow')
        self.pix=QBitmap('d:/PyQt5Projects/pyqt5test/images/mask.png')
        self.resize(self.pix.size())
        self.setMask(self.pix)


    
    def paintEvent(self,envet):

        painter2=QPainter(self)
        painter2.drawPixmap(0,0,self.pix.width(),self.pix.height(),QPixmap('d:/PyQt5Projects/pyqt5test/images/python.jpg'))
```
    3.拖动不规则窗口
```python

```