---
date: 2018-11-20 20:58
status: public
title: 2018-11-20PyQt5信号与槽2-高级
---

## 高级自定义信号与槽
    我们可以通过自己喜欢的方式定义信号与槽函数，并传递参数。

## 定义流程
    1.定义信号
    2.定义槽函数
    3.连接信号与槽函数
    4.发射信号
    
## 定义信号
```python
class WinForm(QWidget):

    #无参数的信号
    signal_NoParameter=pyqtSignal()
    #一个参数的信号
    signal_OneParmeter=pyqtSignal(int)
    #但一个参数（整数或者字符串）的重载版本的信号
    signal_OneParmeter_Overload=pyqtSignal([int],[str])
    #带两个参数(整数或字符串)的信号
    signal_TwoParmeter=pyqtSignal(int,str)
    #带两个参数(整数，整数和整数或字符串)的信号重载版本的信号
    signal_TwoParmeter_Overload=pyqtSignal([int,int],[int,str])
```
## 定义槽函数
```python
    #无参数的槽函数
    def setValue_NoParameter(self):
        pass
    #带一个参数的槽函数（整数）
    def setValue_NoParameter(self,nIndex):
        pass
    #带一个参数的槽函数（字符串）
    def setValue_NoParameter(self,sIndex):
        pass
    #带两个参数的槽函数（整数，整数）
    def setValue_NoParameter(self,x,y):
        pass
    #带两个参数的槽函数（整数，字符串）
    def setValue_NoParameter(self,x,stry):
        pass
```
## 连接信号和槽函数
```python
        #连接信号与槽
        self.signal_NoParameter.connect(self.setValue_NoParameter)
        self.signal_OneParmeter.connect(self.setValue_NoParameter)
        self.signal_OneParmeter_Overload.connect(self.setValue_NoParameter)
        self.signal_TwoParmeter(self.setValue_NoParameter)
        self.signal_TwoParmeter_Overload(self.setValue_NoParameter)
```
## 发射信号
```python
    ##信号的发射
    def mousePressEvent(self,event):
        #发射无参数的信号
        self.signal_NoParameter.emit()
        #带一个参数的信号
        self.signal_OneParmeter.emit(1)
        #发射带一个参数的重载版本的信号
        self.signal_OneParmeter_Overload.emit(1)
        #发射带两个参数的信号
        self.signal_TwoParmeter.emit(1,'abc')
        #发射带两个参数的信号的重载版本
        self.signal_TwoParmeter_Overload.emit(1,2)   
```
## 综合实例
```python
from PyQt5.QtWidgets import *
from PyQt5.QtCore import pyqtSignal
import sys

'''
综合实例
'''

class WinForm(QWidget):

    #自定义信号
    #无参数
    signal1=pyqtSignal()

    #int参数
    signal2=pyqtSignal(int)

    #int和str参数
    signal3=pyqtSignal(int,str)

    #list参数
    signal4=pyqtSignal(list)

    #dict参数
    signal5=pyqtSignal(dict)
    
    #重载参数
    signal6=pyqtSignal([int,str],[str])




    def __init__(self,parent=None):
        super().__init__(parent)
        self.initUI()
    

    def initUI(self):
        self.setWindowTitle("自定义信号和内置槽函数")
        self.resize(330,50)
        btn=QPushButton('关闭',self)
        #连接信号与槽函数
        self.signal1.connect(self.signalCall1)
        self.signal2.connect(self.signalCall2)
        self.signal3.connect(self.signalCall3)
        self.signal4.connect(self.signalCall4)
        self.signal5.connect(self.signalCall5)
        self.signal6[int,str].connect(self.signalCall6Overload)
        self.signal6[str].connect(self.signalCall6Overload)

        #发射信号
        self.signal1.emit()
        self.signal2.emit(1)
        self.signal3.emit(1,'loach')
        self.signal4.emit([1,2,3,4])
        self.signal5.emit({"name":'zhangsan','age':'25'})
        self.signal6[int,str].emit(1,'loach')
        self.signal6[str].emit('loach')
    
    def signalCall1(self):
        print('signal1 emit')
    
    def signalCall2(self,val):
        print('signal1 emit,value:',val)
    
    def signalCall3(self,val,text):
        print('signal1 emit,value:',val,text)
    
    def signalCall4(self,val):
        print('signal1 emit,value:',val)
    
    def signalCall5(self,val):
        print('signal1 emit,value:',val)
    
    def signalCall6(self,val,text):
        print('signal1 emit,value:',val,text)
    
    def signalCall6Overload(self,text):
        print('signal1 emit,value',text)

if __name__=='__main__':
    app=QApplication(sys.argv)
    demo=WinForm()
    demo.show()
    sys.exit(app.exec_())
```

## 使用自定义参数
```python
from PyQt5.QtWidgets import *
from PyQt5.QtCore import pyqtSignal
import sys
from functools import partial

'''
使用自定义参数
'''

class WinForm(QWidget):

    #自定义信号
    closeClicked=pyqtSignal()

    def __init__(self,parent=None):
        super().__init__(parent)
        self.initUI()
    

    def initUI(self):
        self.setWindowTitle("自定义信号和内置槽函数")
        self.resize(330,50)
        btn1=QPushButton('button 1')
        btn2=QPushButton('button 2')
        
        #lambda表达式
        #btn1.clicked.connect(lambda:self.onButtonClick(1))
        #btn2.clicked.connect(lambda:self.onButtonClick(2))
        btn1.clicked.connect(partial(self.onButtonClick,1))
        btn2.clicked.connect(partial(self.onButtonClick,2))
        #偏函数

        layout=QHBoxLayout()
        layout.addWidget(btn1)
        layout.addWidget(btn2)
        self.setLayout(layout)
    
    def onButtonClick(self,n):
        print('button {0} 被按了下'.format(n))
        QMessageBox.information(self,'提示','Button {0} clicked!'.format(n))

if __name__=='__main__':
    app=QApplication(sys.argv)
    demo=WinForm()
    demo.show()
    sys.exit(app.exec_())
```

## 装饰器与槽

## 信号与槽的断开和连接