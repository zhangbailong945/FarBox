---
date: 2018-11-28 16:48
status: public
title: 2018-11-28-3PyQt5扩展1-SQLite数据库
---

## SQLite
    SQLite是一个轻量级的数据库，实现了自给自足，无服务器，零配置，事务性的SQL数据库引擎，其部署最广泛。SQLite源代码不受版权限制。

## 安装
    1.地址：https://www.sqlite.org/download.html
    2.下载后解压到目录，再将目录添加到坏境变量path中，命令行输入sqlite3测试。

## SQLite操作
    1.新建一个数据库(命令行模式)
```shell
SQLite3 test.db
```
    2.查看已建立的数据文件
```shell
.dateabase
```
    3.打开已建立的数据文件
```shell
SQLite3 test.db
```
    4.查看帮助信息
```shell
.help
```
    5.创建数据表
```shell
create table people(id integer primary key,name text);
```
    6.插入表数据表
```shell
insert into people(id,name) values(1,'zhangsan');
```
    7.查询数据表
```shell
select * from people
```
    8.更新数据表
```shell
update people set name='lisi' where id=1;
```
    9.删除数据表
```shell
delete from people where id=1;
```
    10.查询表结构
```python
.schema people
return:CREATE TABLE people(id integer primary key,name text);
```

## SQLite管理工具
    1.下载工具：百度 sqlitestudio


## SQLite与PyQt连接
    1.PyQt API经过精心设计，提供了很多机遇SQL的数据库通信类。其中QSqlDatabase类用来连接数据库，可以使用数据库驱动与不同的数据库进行交互。一个QSqlDatabase实例代表了一次数据连接。
    2.可以数据库驱动类型
驱动类型 | 描述
----------|------
QDB2  | IBM DB2驱动程序
QIBASE | Borland InterBase驱动程序
QMYSQL | MySQL驱动程序
QOCI | Oracle调用接口驱动程序
QODBC | ODBC驱动程序
QPSQL | PostgreSQL驱动程序
QSQLITE | SQLite3或更高版本的驱动程序
QSQLITE | SQLite2驱动程序

## QSqlDatabase类中的常用方法
方法 | 描述
-------|-------
addDatabase() | 设置连接数据库的驱动类型
setDataBaseName() | 设置所连接的数据名称
setHostName() | 设置安装数据库的主机名称
setUserName() | 指定连接的用户名
setPassword() | 设置连接对象的密码
commit() | 提交事务，如果执行成功则返回True
rollback() | 回滚数据库事务
close() | 关闭数据库连接

## 连接MYSQL
```python
from PyQt5.QtSql import QSqlDatabase

db=QSqlDatabase.addDatabase("QMYSQL")
db.setHostName("127.0.0.1")
db.setDatabaseName('user')
db.setUserName("root")
db.setPassword("root")

dbConn=db.open()
```

## 连接SQLITE
```python
from PyQt5.QtSql import QSqlDatabase


db=QSqlDatabase.addDatabase('QSQLITE')
db.setDatabaseName("F:\PyQtProjects\pyqt5test\sqlite\test.db")
dbConn=db.open()

```

## 代码示例
```pythhon
import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtSql import QSqlDatabase,QSqlQuery



def createDB():
    db=QSqlDatabase.addDatabase("QSQLITE")
    db.setDatabaseName("F:/PyQtProjects/pyqt5test/sqlite/test.db")

    if not db.open():
        QMessageBox.critical(None,("无法打开数据库"),("无法建立到数据库的连接，这个列子需要SQLite支持，请检测数据库配置。\n\n 单击取消按钮退出应用。"),QMessageBox.Cancel)
        return False
    
    query=QSqlQuery()
    query.exec_("create table address(id int primary key,name varchar(20),address varchar(30))")
    query.exec_("insert into address values(1,'lisi','BeiJing')")
    query.exec_("insert into address values(2,'zhangbai','TianJing')")
    db.close()
    return True


if __name__=='__main__':
    app=QApplication(sys.argv)
    createDB()
    print('success')
    sys.exit(app.exec_()) 
 ```
 
 ## PyQt5窗体中使用Sqlite
 ```python
 import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtSql import QSqlDatabase,QSqlQuery


class MyWidget(QWidget):

    def __init__(self,parent=None):
        super(MyWidget,self).__init__(parent)
        self.db=QSqlDatabase.addDatabase("QSQLITE")
        self.db.setDatabaseName('F:/PyQtProjects/pyqt5test/sqlite/test.db')
        #打开数据库
        self.db.open()
        self.initUI()
    
    def initUI(self):
        self.resize(400,300)
    
    def closeEvent(self,event):
        #关闭数据库
        self.db.close()


if __name__=='__main__':
    app=QApplication(sys.argv)
    demo=MyWidget()
    demo.show()
    sys.exit(app.exec_())

 ```
 
 ## 数据库模型
`   PyQt中的QSqlTableModel类是一个高级接口，提供了可读的数据模型，用于在单个表中读取和保存数据。此模型用于填充QTableView对象，它向用户呈现了可以放在任何顶层窗口中的可滚动和可编辑的视图。
    使用方法，先声明QSqlTableModel对象，然后查询people表中的数据，最后保存数据到QSqlTableModel对象的只读数据模型中。
    QSqlTableModel类是一个可以读和写的表格模型，当连接到数据库后，使用setTable()函数设置要查询的表，使用setFilter()函数设置过滤条件，这个过滤器条件与SQL查询语句的where条件一样，然后使用select()函数执行查询，最后使用setEditStrategy()函数设置"编辑策略"。
    编辑策略类型
编辑策略 | 描述
-------|-----
QSqlTableModel.OnFieldChange | 所有变更实时更新到数据库中


```python

```
 
 