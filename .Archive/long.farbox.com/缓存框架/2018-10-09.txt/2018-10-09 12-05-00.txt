---
date: 2018-10-09 00:03
status: public
title: 2018-10-09缓存系统-问道篇
---

## 为什么是用缓存？
    减少服务器的负担，避免重复计算，提高系统性能，提高网站的访问速度。

## 缓存是怎么应运而生的？
    1.静态网站的访问方式：客户端->请求服务器->服务器返回静态页面->响应给客户端
    2.动态网站的访问方式：客户端->请求服务器A->处理逻辑->请求数据库->返回数据->最后动态生成页面->响应给客户端
    3.1和2对比可以发现，动态网站服务器的操作量远远要大于静态网站。在超过一定量的客户端同时请求这两种网站，很明显动态网站的服务器压力要比静态网站大很多。因为动态网站需要计算，从数据库取数据等一些繁杂的操作，所以访问静态网站要比访问动态网站要快得多。为了解决动态网站超量请求（高峰负载）带来的压力，这个时候缓存技术就出现了。

## 缓存
     这里缓存指的是Web缓存（或HTTP缓存）是用于临时存储（缓存）Web文档（如HTML页面和图像），以减少服务器延迟的一种技术。说白了，就是把动态网站第一次响应的数据页面当作静态页面缓存下来，下一次或下多次请求的时候，直接访问这个缓存的页面，不需要再经过处理逻辑，请求数据库等繁杂的操作了。从而也就减小了服务器的压力。
 
## 缓存特征
### 命中率
     * 命中率=返回正确结果数/请求缓存次数，它是衡量缓存有效性的重要指标。命中率越高，表明缓存的使用率越高。
### 最大元素（或最大空间）
     * 缓存中可以存放的最大元素的数量，一旦缓存元素数量超过这个值（或者缓存数据所占用空间超过其最大致辞空间），那么将会触发缓存启动清空策略根据不同的场景合理的设置最大元素质往往可以一定程度上提高缓存的命中率，从而有效的使用缓存。
### 清空策略
     当缓存空间用满时，如何保证在稳定服务器的同事提升有效命中率？这需要缓存策略来处理。
    1、FIFO（first in first out）
    * 先进先出策略，最先进入缓存的数据在缓存空间不够的情况下（超出最大元素限制）会被有限清洗掉，已腾出行的空间接受新的数据。策略算法主要比较缓存元素的创建时间。在数据实效性要求场景下课选择该类策略，优先保障最新数据库可用。
    2、LFU（less frequently used）
    * 最少使用策略，无论是否过期，根据元素的被使用次数判断，清除使用次数较少的元素释放空间。策略算法主要比较元素hitCount(命中次数)。在保证高频数据有效性场景，可选择这类策略。
    3、LRU（least recently used）
    最近最少使用策略，无论是否过期，根据元素最后一次呗使用的时间戳，清除最远使用时间戳的元素释放空间。策略算法主要比较最近一次get使用时间，在热点数据场景下适用，优先保证热点数据的有效性。
    4、其他策略
    *根据 过期时间判断，清理过期时间最长的元素
    *根据过期时间判断，清理最近过期的元素
    *随机清理
    *根据关键字（或元素内容）长短清理等

## 缓存介质
### 内存
    *将缓存存储在内存中是最快的选择，无需额外的I/O开销，但是内存的缺点是没有持久化存储，一旦应用异常断电或者重启，缓存数据无法复原。

### 硬盘
    * 大多数缓存框架会结合使用内存和硬盘，在内存分配可能干满了或是在异常的情况下，可以被动或主动的将内存空间数据持久化到硬盘中，达到释放空间或备份数据。

###数据库
    * key-value存储
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     