---
date: 2018-06-26 21:27
status: public
title: 2018-06-26PyQt5控件5-按钮类控件
---

##定义
按钮是最重要的触发动作的请求方式，用来与用户进行交互操作。在PyQt中根据不同的使用场景将按钮分为不同的表现形式。按钮的基类是QAbstractButton,提供了按钮的通用性功能。QAbstractButton类为抽象类，不能实例化，必须由其他的按钮类继承QAbstractButton类，来实现不同的功能和不同的表现形式。常见的按钮类。QPushButton、QToolButton、QRadioButton和QCheckBox。

##QAbstractButton提供的状态

状态 | 描述
-------- | -------
isDown() | 提示按钮是否被按下
isChecked() | 提示按钮是否已经标记
isEnable() | 提示按钮是否可以被用户点击
isCheckAble() | 提示按钮是否可标记的
isAutoRepeat() | 设置按钮是否在用户长按时可以自动重复执行

##QAbstractButton提供的信号

信号 | 含义
--------|-------
Pressed | 当鼠标指针在按钮上并按下左键时触发该信号
Released | 当鼠标左键被释放时触发该信号
Clicked | 当鼠标左键被按下然后释放时，或者快捷键被释放时触发该信号
Toggled | 当按钮的标记状态发生改变时触发该信号

## 为QPushButton设置快捷键
通过按钮名字能为QPushButton设置快捷键，比如名字为:"&Copy"的按钮，它的快捷键是alt+C.其规则是想要实现快捷键alt+C,那么按钮的名字就要有这个字母C，并在C字母前加上&，这个字母一般首字母。在按钮显示时，&不会显示，而是在首字母显示一条下划线。
## QPushButton按钮实战
```python

from PyQt5.QtWidgets import QApplication,QWidget,QPushButton,QDialog,QVBoxLayout
from PyQt5.QtCore import *
from PyQt5.QtGui import QPixmap,QIcon
import sys

class Form(QDialog):

    def __init__(self,parent=None):
        super(Form,self).__init__(parent)
        layout=QVBoxLayout()
        self.btn1=QPushButton('按钮1')
        self.btn1.setCheckable(True)
        self.btn1.toggle()
        self.btn1.clicked.connect(lambda:self.whichbtn(self.btn1))
        self.btn1.clicked.connect(self.btnstate)
        layout.addWidget(self.btn1)

        self.btn2=QPushButton('图片按钮')
        self.btn2.setIcon(QIcon(QPixmap("./images/32x32.ico")))
        self.btn2.clicked.connect(lambda:self.whichbtn(self.btn2))
        layout.addWidget(self.btn2)
        self.setLayout(layout)

        self.btn3=QPushButton('disabled')
        self.btn3.setEnabled(False)
        layout.addWidget(self.btn3)

        self.btn4=QPushButton("&Copy")
        self.btn4.setDefault(True)
        self.btn4.clicked.connect(lambda:self.whichbtn(self.btn4))
        layout.addWidget(self.btn4)
        self.setWindowTitle('Button 案例')

    def btnstate(self):
        if self.btn1.isChecked():
            print("button pressed")
        else:
            print("button released")
    
    def whichbtn(self,btn):
        print("clicked button is "+btn.text())


if __name__=='__main__':
    app=QApplication(sys.argv)
    btnDemo=Form()
    btnDemo.show()
    sys.exit(app.exec_())
```